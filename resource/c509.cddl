; should be as defined in https://www.rfc-editor.org/rfc/rfc9090.html
; i.e. oid = #6.111(bstr), but all oid usages are unwrapped and
; zcbor does not support unwrapping, so oid in unwrapped here manually
; as well as the other types

unwrapped_oid = bstr
unwrapped_time = number
unwrapped_biguint = bstr

C509Certificate = [                                                                 ; Taken from https://datatracker.ietf.org/doc/draft-ietf-cose-cbor-encoded-cert/
   TBSCertificate,
   issuerSignatureValue : any
]

; The elements of the following group are used in a CBOR Sequence:
TBSCertificate = (
   c509CertificateType: int,
   certificateSerialNumber: CertificateSerialNumber,
   issuerSignatureAlgorithm: AlgorithmIdentifier,
   issuer: Name / null,
   validityNotBefore: unwrapped_time,
   validityNotAfter: unwrapped_time / null,
   subject: Name,
   subjectPublicKeyAlgorithm: AlgorithmIdentifier,
   subjectPublicKey: any,
   extensions: Extensions,
)

CertificateSerialNumber = unwrapped_biguint

Name = [ * Attribute ] / text / bytes

Attribute = ( attributeTypeInt: int, attributeValueText: text ) //
            ( attributeTypeOID: unwrapped_oid, attributeValueBytes: bytes )

AlgorithmIdentifier = int / unwrapped_oid / [ algorithm: unwrapped_oid, parameters: bytes ]

Extensions = [ * Extension ] / int
Extension = ( extensionIDInt: int, extensionValueAny: any ) // 
            ( extensionIDOid: unwrapped_oid, ? critical: true, extensionValueBytes: bytes )

KeyIdentifier = bytes
SubjectKeyIdentifier = KeyIdentifier

KeyUsage = int

PolicyMappings = [ + (issuerDomainPolicy: unwrapped_oid, subjectDomainPolicy: unwrapped_oid) ]

BasicConstraints = int

PolicyConstraints = [
   requireExplicitPolicy: uint / null,
   inhibitPolicyMapping: uint / null,
]

KeyPurposeId = int / unwrapped_oid
ExtKeyUsageSyntax = [ 2* KeyPurposeId ] / KeyPurposeId

InhibitAnyPolicy = uint

GeneralName = ( GeneralNameType : int, GeneralNameValue : any )
GeneralNames = [ + GeneralName ]
SubjectAltName = GeneralNames / text

IssuerAltName  = GeneralNames / text

DistributionPointName = [ 2* text ] / text
CRLDistributionPoints = [ + DistributionPointName ]

AccessDescription = ( accessMethod: int / unwrapped_oid , uri: text )
AuthorityInfoAccessSyntax = [ + AccessDescription ]

KeyIdentifierArray = [
  keyIdentifier: KeyIdentifier,
  authorityCertIssuer: GeneralNames,
  authorityCertSerialNumber: CertificateSerialNumber
]
AuthorityKeyIdentifier = KeyIdentifierArray / KeyIdentifier

PolicyIdentifier = int / unwrapped_oid
PolicyQualifierInfo = (
  policyQualifierId: int / unwrapped_oid,
  qualifier: text,
)
CertificatePolicies = [
  + ( PolicyIdentifier, ? [ + PolicyQualifierInfo ] )
]

GeneralSubtrees = [ + GeneralName ]
NameConstraints = [
  permittedSubtrees: GeneralSubtrees / null,
  excludedSubtrees: GeneralSubtrees / null,
]

Attributes = ( attributeTypesInt: int, attributeValuesText: [+text] ) //
             ( attributeTypesOID: unwrapped_oid, attributeValuesBytes: [+bytes] )
SubjectDirectoryAttributes = [+Attributes]

ASIdOrRange = uint / [min:uint, max:uint]
ASIdentifiers = [ + ASIdOrRange ] / null

Address = bytes
AddressPrefix = (Address, unusedBits: uint)
AddressRange = [min: Address, max: Address]
IPAddressOrRange = AddressPrefix / AddressRange
IPAddressChoice = [ + IPAddressOrRange ] / null
IPAddressFamily = (AFI: uint, IPAddressChoice)
IPAddrBlocks = [ + IPAddressFamily ]

SignedCertificateTimestamp = (
  logID: bytes,
  timestamp: int,
  sigAlg: AlgorithmIdentifier,
  sigValue: any,
)
SignedCertificateTimestamps = [ + SignedCertificateTimestamp ]

; Force the generation of all types
All = {
    C509Certificate: C509Certificate,
    TBSCertificate: TBSCertificate,
    CertificateSerialNumber: CertificateSerialNumber,
    Name: Name,
    Attribute: Attribute,
    AlgorithmIdentifier: AlgorithmIdentifier,
    Extensions: Extensions,
    Extension: Extension,
    KeyIdentifier: KeyIdentifier,
    SubjectKeyIdentifier: SubjectKeyIdentifier,
    KeyUsage: KeyUsage,
    PolicyMappings: PolicyMappings,
    BasicConstraints: BasicConstraints,
    PolicyConstraints: PolicyConstraints,
    KeyPurposeId: KeyPurposeId,
    ExtKeyUsageSyntax: ExtKeyUsageSyntax,
    InhibitAnyPolicy: InhibitAnyPolicy,
    GeneralName: GeneralName,
    GeneralNames: GeneralNames,
    SubjectAltName: SubjectAltName,
    IssuerAltName: IssuerAltName,
    DistributionPointName: DistributionPointName,
    CRLDistributionPoints: CRLDistributionPoints,
    AccessDescription: AccessDescription,
    AuthorityInfoAccessSyntax: AuthorityInfoAccessSyntax,
    KeyIdentifierArray: KeyIdentifierArray,
    AuthorityKeyIdentifier: AuthorityKeyIdentifier,
    PolicyIdentifier: PolicyIdentifier,
    PolicyQualifierInfo: PolicyQualifierInfo,
    CertificatePolicies: CertificatePolicies,
    GeneralSubtrees: GeneralSubtrees,
    NameConstraints: NameConstraints,
    Attributes: Attributes,
    SubjectDirectoryAttributes: SubjectDirectoryAttributes,
    ASIdOrRange: ASIdOrRange,
    ASIdentifiers: ASIdentifiers,
    Address: Address,
    AddressPrefix: AddressPrefix,
    AddressRange: AddressRange,
    IPAddressOrRange: IPAddressOrRange,
    IPAddressChoice: IPAddressChoice,
    IPAddressFamily: IPAddressFamily,
    IPAddrBlocks: IPAddrBlocks,
    SignedCertificateTimestamp: SignedCertificateTimestamp,
    SignedCertificateTimestamps: SignedCertificateTimestamps
}