; Taken from https://www.rfc-editor.org/rfc/rfc9090.html
oid = #6.111(bstr)

; Taken from https://datatracker.ietf.org/doc/draft-ietf-cose-cbor-encoded-cert/
C509Certificate = [
   TBSCertificate,
   issuerSignatureValue : any
]

; The elements of the following group are used in a CBOR Sequence:
TBSCertificate = (
   c509CertificateType: int,
   certificateSerialNumber: CertificateSerialNumber,
   issuerSignatureAlgorithm: AlgorithmIdentifier,
   issuer: Name / null,
   validityNotBefore: ~time,
   validityNotAfter: ~time / null,
   subject: Name,
   subjectPublicKeyAlgorithm: AlgorithmIdentifier,
   subjectPublicKey: any,
   extensions: Extensions,
)

CertificateSerialNumber = ~biguint

Name = [ * Attribute ] / text / bytes

Attribute = ( attributeType: int, attributeValue: text ) //
            ( attributeType: ~oid, attributeValue: bytes )

AlgorithmIdentifier = int / ~oid / [ algorithm: ~oid, parameters: bytes ]

Extensions = [ * Extension ] / int
Extension = ( extensionID: int, extensionValue: any ) // 
            ( extensionID: ~oid, ? critical: true, extensionValue: bytes )

KeyIdentifier = bytes
SubjectKeyIdentifier = KeyIdentifier

KeyUsage = int

PolicyMappings = [ + (issuerDomainPolicy: ~oid, subjectDomainPolicy: ~oid) ]

BasicConstraints = int

PolicyConstraints = [
   requireExplicitPolicy: uint / null,
   inhibitPolicyMapping: uint / null,
]

KeyPurposeId = int / ~oid
ExtKeyUsageSyntax = [ 2* KeyPurposeId ] / KeyPurposeId

InhibitAnyPolicy = uint

GeneralName = ( GeneralNameType : int, GeneralNameValue : any )
GeneralNames = [ + GeneralName ]
SubjectAltName = GeneralNames / text

IssuerAltName  = GeneralNames / text

DistributionPointName = [ 2* text ] / text
CRLDistributionPoints = [ + DistributionPointName ]

AccessDescription = ( accessMethod: int / ~oid , uri: text )
AuthorityInfoAccessSyntax = [ + AccessDescription ]

KeyIdentifierArray = [
  keyIdentifier: KeyIdentifier,
  authorityCertIssuer: GeneralNames,
  authorityCertSerialNumber: CertificateSerialNumber
]
AuthorityKeyIdentifier = KeyIdentifierArray / KeyIdentifier

PolicyIdentifier = int / ~oid
PolicyQualifierInfo = (
  policyQualifierId: int / ~oid,
  qualifier: text,
)
CertificatePolicies = [
  + ( PolicyIdentifier, ? [ + PolicyQualifierInfo ] )
]

GeneralSubtrees = [ + GeneralName ]
NameConstraints = [
  permittedSubtrees: GeneralSubtrees / null,
  excludedSubtrees: GeneralSubtrees / null,
]

Attributes = ( attributeTypesInt: int, attributeValuesText: [+text] ) //
             ( attributeTypesOID: ~oid, attributeValuesBytes: [+bytes] )
SubjectDirectoryAttributes = [+Attributes]

ASIdOrRange = uint / [min:uint, max:uint]
ASIdentifiers = [ + ASIdOrRange ] / null

Address = bytes
AddressPrefix = (Address, unusedBits: uint)
AddressRange = [min: Address, max: Address]
IPAddressOrRange = AddressPrefix / AddressRange
IPAddressChoice = [ + IPAddressOrRange ] / null
IPAddressFamily = (AFI: uint, IPAddressChoice)
IPAddrBlocks = [ + IPAddressFamily ]

SignedCertificateTimestamp = (
  logID: bytes,
  timestamp: int,
  sigAlg: AlgorithmIdentifier,
  sigValue: any,
)
SignedCertificateTimestamps = [ + SignedCertificateTimestamp ]